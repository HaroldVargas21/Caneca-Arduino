#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "soc/soc.h"
#include "soc/rtc_cntl_reg.h"
#include "Base64.h"
#include "esp_camera.h"

// adicionales inicio1///
#include "Arduino.h"
#include "FS.h"                // SD Card ESP32
#include "SD_MMC.h"            // SD Card ESP32

#include "driver/rtc_io.h"
#include <EEPROM.h>            // read and write from flash memory
// define the number of bytes you want to access
#define EEPROM_SIZE 1
 // de motores
 #include <Servo.h> // se incluye la biblioteca Servo
Servo myservo;  // create servo object to control a servo
// twelve(12) servo objects can be created on most boards
Servo compuerta;
 // fin de librerias motores
RTC_DATA_ATTR int bootCount = 0;
///////////////fin adicionales1//////////

const char* ssid     = "iPhone Milton Chaparro";   //your network SSID
const char* password = "6bp5ke0jow34a";   //your network password

String myDomain = "172.20.10.3";


String myScript = "/caneca/canecas_api/1/solve_image/";
String myFilename = "filename=ESP32-CAM.jpg";
String mimeType = "&mimetype=image/jpeg";
String myImage = "&file=";

int waitingTime = 90000; //Wait 30 seconds to google response.

#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

int pictureNumber = 0;// se adiciono
void setup()
{
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);
  
  Serial.begin(115200);
  delay(10);
  
  WiFi.mode(WIFI_STA);

  Serial.println("");
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);  

  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  Serial.println("");
  Serial.println("STAIP address: ");
  Serial.println(WiFi.localIP());
    
  Serial.println("");

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  config.frame_size = FRAMESIZE_VGA;  // UXGA|SXGA|XGA|SVGA|VGA|CIF|QVGA|HQVGA|QQVGA
  config.jpeg_quality = 10;
  config.fb_count = 1;
  // Init Camera
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    delay(1000);
    ESP.restart();
  }
  
}

boolean enviar = true;

void loop() {
 
  if(!enviar) {
    Serial.println("entrando en modo de reposo");
    delay(1000);
    // Turns off the ESP32-CAM white on-board LED (flash) connected to GPIO 4
  pinMode(4, OUTPUT);
  digitalWrite(4, LOW);
  rtc_gpio_hold_en(GPIO_NUM_4);

  esp_sleep_enable_ext0_wakeup(GPIO_NUM_13, 0);
 
  Serial.println("Iniciando modo de reposo");
  delay(1000);
  esp_deep_sleep_start();
  Serial.println("Esta en modo de reposo - no se muestra este mensaje");
  }
  else {
    
    Serial.println("Saliendo de modo de reposo");
    pinMode(4, INPUT); //si
  digitalWrite(4, LOW);//si
  rtc_gpio_hold_dis(GPIO_NUM_4);// Si
    saveCapturedImage();
    enviar = false;
    Serial.println("Fin de reconocimiento ");
    delay(1000);
    Serial.printf("En espera de nuevo estimulo de sensor PIR");
    delay(1000);
      
  }
}
///////////////////////////////////////////////////////
void servomotores(String prediccion){
 
  //motores
  myservo.attach(12);  // conecta el servo en el pin 12 al objeto servo
// pinMode(12, OUTPUT);                   
compuerta.attach(15);  // conecta el servo compuerta en el pin 15 al objeto servo 
delay (500);
Serial.println("entrando a función servomotor");  
delay (500);
                   
String plastic,cardboard,paper,glass,metal,trash; // se adiciona 
  // fin de configuración de servomotores
    /*Apertura de escotilla y movimiento de motores     
     * 
       */
    //////////////////////////////////de motores
// control de servomotores 
delay (500);
Serial.println("probando linea");  
delay (500);
//Serial.begin(115200);
//delay(10);
//String prediccion = "trash";
//String prediccion;
//delay (100);

//mover motor plastic 30 grados y abrir compuerta 
delay (500);
Serial.println("probando otra linea");  
delay (500);
Serial.println(prediccion);
delay (500);
Serial.println("Esta es la prediccion");
delay (500);
Serial.println(prediccion == "metal" );
delay (500);
    if(prediccion == "plastic"){
     // int pos;
    for (int pos = 0; pos <= 30; pos += 1) {                                     
    myservo.write(pos);   
    Serial.println("Sermomotor Plastic en 30 grados"); 
    delay(40); } 
    ///////incia apertura de compuerta
    //int posc1 = 0; // variable to store the servo compuerta position
    for (int posc1 = 0; posc1 <= 130; posc1 += 1) {                                     
    compuerta.write(posc1);   
    Serial.println("Sermomotor compuerta 130 grados"); 
    delay(40); } 
    // Cerrar compuerta                      
    for (int posc1 = 130; posc1 >= 0; posc1 -= 1) { 
    compuerta.write(posc1); 
    Serial.println("Sermomotor compuerta en 0 grados");              
    delay(40); } 
    // Fin compuerta
    // fin   
     // devolver motor de plastico a cero grados             
    for (int pos = 30; pos >= 0; pos -= 1) { 
    myservo.write(pos); 
    Serial.println("Sermomotor Plastic en 0 grados");              
    delay(40); } 
    
   
 ////////////////////////////////////////////////////////////////////////////////////                     
 // mover motor  cardboard 60 grados y abrir compuerta       
    }else if (prediccion == "cardboard"){
     for ( int pos = 0; pos <= 60; pos += 1) {                                     
    myservo.write(pos);  
    Serial.println("Sermomotor cardboard en 60 grados");   
    delay(40); }
    // Abrir y cerrar compuerta
    delay(500);
    Serial.println("CAMBIANDO DE MOTOR"); 
    delay(500);
    // Abrir compuerta
    //int posc = 0; // variable to store the servo compuerta position
    for (int posc = 0; posc <= 130; posc += 1) {                                     
    compuerta.write(posc);   
    Serial.println("Sermomotor compuerta 130 grados"); 
    delay(40); } 
    // Cerrar compuerta                      
    for (int posc = 130; posc >= 0; posc -= 1) { 
    compuerta.write(posc); 
    Serial.println("Sermomotor compuerta en 0 grados");              
    delay(40); } 
         
    // Fin compuerta
    // Devolviendo motor de cardboard
    for (int pos = 60; pos >= 0; pos -= 1) { 
    myservo.write(pos); 
    Serial.println("Sermomotor cardboard en 0 grados");             
    delay(40); }
        
    ////////////////////////////////////////////////////////////////
 // mover motor paper 90 grados y abrir compuerta
    }else if (prediccion == "paper"){
     for (int pos = 0; pos <= 90; pos += 1) {                                     
     myservo.write(pos); 
     Serial.println("Sermomotor paper en 90 grados");   
     delay(40); } 
      // Abrir y cerrar compuerta
     // Abrir compuerta
    for (int pospa = 0; pospa <= 130; pospa += 1) {                                     
    compuerta.write(pospa);   
    Serial.println("Sermomotor compuerta 130 grados"); 
    delay(40); } 
    // Cerrar compuerta                      
    for (int pospa = 130; pospa >= 0; pospa -= 1) { 
    compuerta.write(pospa); 
    Serial.println("Sermomotor compuerta en 0 grados");              
    delay(40); } 
    // Fin compuerta
     
     /// devolviendo el motor paper            
     for (int pos = 90; pos >= 0; pos -= 1) { 
     myservo.write(pos); 
     Serial.println("Sermomotor paper en 0 grados");             
     delay(40); } 

   
 // mover motor glass 120 grados y abrir compuerta   
    } else if (prediccion == "glass"){    
    for (int pos = 0; pos <= 120; pos += 1) {                                     
    myservo.write(pos); 
    Serial.println("Sermomotor glass en 120 grados");   
    delay(40); }   
    
      // Abrir y cerrar compuerta....
    // Abrir compuerta
    for (int posgl = 0; posgl <= 130; posgl += 1) {                                     
    compuerta.write(posgl);   
    Serial.println("Sermomotor compuerta 130 grados"); 
    delay(40); } 
    // Cerrar compuerta                      
    for (int posgl = 130; posgl >= 0; posgl -= 1) { 
    compuerta.write(posgl); 
    Serial.println("Sermomotor compuerta en 0 grados");              
    delay(40); } 
    // Fin compuerta
    // fin   
    // devolviendo el motor glass               
    for (int pos = 120; pos >= 0; pos -= 1) { 
    myservo.write(pos); 
    Serial.println("Sermomotor glass en 0 grados");             
    delay(40); } 
  
 // mover motor metal 150 grados y abrir compuerta
    } else if (prediccion == "metal"){      
    for (int pos = 0; pos <= 150; pos += 1) {                                     
    myservo.write(pos); 
    Serial.println("Sermomotor metal en 150 grados");   
    delay(40); } 
  // Abrir compuerta
    for (int posme = 0; posme <= 130; posme += 1) {                                     
    compuerta.write(posme);   
    Serial.println("Sermomotor compuerta 130 grados"); 
    delay(40); } 
    // Cerrar compuerta                      
    for (int posme = 130; posme >= 0; posme -= 1) { 
    compuerta.write(posme); 
    Serial.println("Sermomotor compuerta en 0 grados");              
    delay(40); } 
    // Fin compuerta
    //Devolver motor metal            
    for (int pos = 150; pos >= 0; pos -= 1) { 
     myservo.write(pos); 
    Serial.println("Sermomotor metal en 0 grados");             
    delay(40); }
    
 // mover motor trash 180 grados y abrir compuerta
 
    } else if (prediccion == "trash"){  
    //int pos = 0;    
    for ( int pos = 0; pos <= 180; pos += 1) {                                     
    myservo.write(pos); 
    Serial.println("Sermomotor trash en 180 grados");   
    delay(40); }  
// abrir compuerta      
    delay(500);
    Serial.println("CAMBIANDO DE MOTOR"); 
    delay(500);
    // Abrir y cerrar compuerta
    // Iniciando abrir compuerta
    for (int postr = 0; postr <= 130; postr += 1) {                                     
    compuerta.write(postr);   
    Serial.println("Sermomotor compuerta 130 grados"); 
    delay(40); } 
    // iniciando Cerrar compuerta                      
    for (int postr = 130; postr >= 0; postr -= 1) { 
    compuerta.write(postr); 
    Serial.println("Sermomotor compuerta en 0 grados");              
    delay(40); } 
    //  compuerta Cerrada
    //  Devolver motor trash de 180 grados  a cero       
    for (int pos = 180; pos >= 0; pos -= 1) { 
    myservo.write(pos); 
    Serial.println("Sermomotor trash en 0 grados");             
    delay(40); } 
  }
  Serial.println("saliendo a función servomotor");
}// cierra servomotores ()
/////////////////////////////////cierra motores
//https://github.com/zenmanenergy/ESP8266-Arduino-Examples/
//https://RandomNerdTutorials.com/esp32-cam-pir-motion-detector-photo-capture/
/////////////////////////////////////////////////////
void saveCapturedImage() {
  String getAll;
  String getBody;
  Serial.println("Connect to " + String(myDomain));
  WiFiClient client;
  if (client.connect(myDomain.c_str(), 80)) {
    Serial.println("Connection successful");
    
    camera_fb_t * fb = NULL;
    fb = esp_camera_fb_get();  
    if(!fb) {
      Serial.println("Camera capture failed");
      delay(1000);
      ESP.restart();
      return;
    }
  
    char *input = (char *)fb->buf;
    char output[base64_enc_len(3)];
    String imageFile = "";
    for (int i=0;i<fb->len;i++) {
      base64_encode(output, (input++), 3);
      if (i%3==0) imageFile += urlencode(String(output));
    }
    String Data = myFilename+mimeType+myImage;
    
    esp_camera_fb_return(fb);
    
    Serial.println("Send a captured image to Servidor Ecociencia.");
    
    client.println("POST " + myScript + " HTTP/1.1");
    client.println("Host: " + String(myDomain));
    client.println("Authorization: Basic bWlsbGVyOjEyMzQ1Ng==" );
    client.println("Content-Length: " + String(Data.length()+imageFile.length()));
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.println();
    
    client.print(Data);
    int Index;
    for (Index = 0; Index < imageFile.length(); Index = Index+1000) {
      client.print(imageFile.substring(Index, Index+1000));
    }
    
    Serial.println("Waiting for response.");
    long int StartTime=millis();
    while (!client.available()) {
      Serial.print(".");
      delay(100);
      if ((StartTime+waitingTime) < millis()) {
        Serial.println();
        Serial.println("No response.");
        //If you have no response, maybe need a greater value of waitingTime
        break;
      }
    }
    Serial.println("Respuesta desde aquí"); 
      
    int timoutTimer = 10000; // estaba en 10000
    long startTimer = millis();
    boolean state = false;
    
    while ((startTimer + timoutTimer) > millis()) {
      Serial.print(".");
      delay(100);      // estaba en 100
      while (client.available()) {
        char c = client.read();
        if (c == '\n') {
          if (getAll.length()==0) { state=true; }
          getAll = "";
        }
        else if (c != '\r') { getAll += String(c); }
        if (state==true) { getBody += String(c); }
        startTimer = millis();
      }
      if (getBody.length()>0) { break; }
    }
    Serial.println();
    client.stop();
     Serial.println(getBody); 
    String prediccion = getBody.substring(67);
    prediccion.replace('}',' ');
    prediccion.replace('"',' ');
    prediccion.replace(" ", "");

    //Serial.println(getBody);
    Serial.println(prediccion);

    //  aca iría el codigo de los motores 
    delay (5000);
  servomotores(prediccion);
    // devolver la función a esta parte del codigo
    ////////////////////fin de motores
    
  } else {         
    Serial.println("Connected to " + String(myDomain) + " failed.");
  }
  client.stop();
}// cierra el savecaptueImage
///////aca estaba función servomotres
String urlencode(String str)
{
    String encodedString="";
    char c;
    char code0;
    char code1;
    char code2;
    for (int i =0; i < str.length(); i++){
      c=str.charAt(i);
      if (c == ' '){
        encodedString+= '+';
      } else if (isalnum(c)){
        encodedString+=c;
      } else{
        code1=(c & 0xf)+'0';
        if ((c & 0xf) >9){
            code1=(c & 0xf) - 10 + 'A';
        }
        c=(c>>4)&0xf;
        code0=c+'0';
        if (c > 9){
            code0=c - 10 + 'A';
        }
        code2='\0';
        encodedString+='%';
        encodedString+=code0;
        encodedString+=code1;
        //encodedString+=code2;
      }
      yield();
    }
    return encodedString;
}

//////////////////////////////////////////////////motores
